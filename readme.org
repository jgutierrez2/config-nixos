#+OPTIONS: toc:2          (only include two levels in TOC)

* Contents                                                        :toc:quote:
#+begin_quote
- [[#machines][Machines]]
  - [[#biollante][biollante]]
  - [[#ghidorah][ghidorah]]
  - [[#rodan][rodan]]
- [[#modules][Modules]]
  - [[#shared][shared]]
- [[#containers][Containers]]
  - [[#homepage][homepage]]
  - [[#radarr][radarr]]
  - [[#sonarr][sonarr]]
  - [[#readarr][readarr]]
  - [[#prowlarr][prowlarr]]
  - [[#calibre][calibre]]
  - [[#calibre-web][calibre-web]]
  - [[#sabnzbd][sabnzbd]]
  - [[#jellyfin][jellyfin]]
  - [[#caddy][caddy]]
  - [[#frigate][frigate]]
  - [[#hass][hass]]
  - [[#zwavejs][zwavejs]]
#+end_quote

* Machines
** biollante
*** main
#+BEGIN_SRC nix :tangle ~/.config/nixos/machines/biollante/biollante.nix

  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’)

  { config, pkgs, lib, ... }:

  {

    imports =
      [
        ../../modules/shared.nix
        ./services.nix

        ../../containers/homepage.nix
        ../../containers/radarr.nix
        ../../containers/sonarr.nix
        ../../containers/readarr.nix
        ../../containers/calibre.nix
        ../../containers/calibre-web.nix
        ../../containers/sabnzbd.nix
        ../../containers/prowlarr.nix
        ../../containers/jellyfin.nix
        ../../containers/caddy.nix
      ];

    networking.hostName = "biollante"; # Define your hostname.

    fileSystems."/external-media" = {
      device = "/dev/disk/by-uuid/18c8aea6-4ac9-413b-9a00-22da584dc4a9";
      fsType = "ext4";
    };

    environment.systemPackages = with pkgs; [
      tmux
    #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    #  wget
    ];


   hardware.opengl = {
      enable = true;
      extraPackages = with pkgs; [
        intel-media-driver # For Broadwell (2015) or newer processors. LIBVA_DRIVER_NAME=iHD
  #      intel-vaapi-driver # For older processors. LIBVA_DRIVER_NAME=i965
      ];
    };
    environment.sessionVariables = { LIBVA_DRIVER_NAME = "iHD"; }; # Optionally, set the env var
    virtualisation.docker.enable = true;

    environment.interactiveShellInit = ''
      alias wn='emacsclient ~/notes/work-notes.org'
      PS1="> "
    '';
  }

#+END_SRC
*** services
#+begin_src nix :tangle ~/.config/nixos/machines/biollante/services.nix

  { config, pkgs, ... } :
  {

    services = {
      ttyd = {
        enable = true;
        writeable = true;
        port = 7681;
        terminalType = "xterm-direct";
        entrypoint = [ "${pkgs.shadow}/bin/login" ];
        #extraOptions = "new -A -s ttyd";
        };

      syncthing = {
        enable = true;
        guiAddress = "0.0.0.0:8384";
        user = "jacob";
        configDir = "/home/jacob/.config/syncthing";
      };

      webdav-server-rs = {
        enable = true;
        settings = {
          server.listen = [ "0.0.0.0:4918" "[::]:4918" ];
          location = [
            {
              route = [ "/public/*path" ];
              directory = "/home/jacob/notes";
              handler = "filesystem";
              methods = [ "webdav-rw" ];
              autoindex = true;
              auth = "false";
            }
            ];
        };
      };
      emacs = {
        enable = true;
      };
    };

    #for ttyd
    networking.firewall.allowedTCPPorts = [ 7681

                                            #syncthing
                                            8384
                                            22000

                                            #webdav
                                            4918
                                          ];

    #for syncthing
    networking.firewall.allowedUDPPorts = [ 22000 21027 ];

  }
#+end_src
** ghidorah
#+BEGIN_SRC nix :tangle ~/.config/nixos/machines/ghidorah/ghidorah.nix
  
  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’).

  { config, pkgs, lib, ... }:

  {

    imports =
      [ ../../modules/shared.nix

	../../containers/frigate.nix
	../../containers/hass.nix
	../../containers/zwavejs.nix
      ];


    networking.hostName = "ghidorah"; # Define your hostname.

    fileSystems."/external-media" = {
      device = "/dev/disk/by-uuid/6c713be8-7eea-4420-b944-f21cb3542218";
      fsType = "ext4";
    };

   hardware.opengl = {
      enable = true;
      extraPackages = with pkgs; [
	intel-media-driver # For Broadwell (2015) or newer processors. LIBVA_DRIVER_NAME=iHD
  #      intel-vaapi-driver # For older processors. LIBVA_DRIVER_NAME=i965
      ];
    };
    environment.sessionVariables = { LIBVA_DRIVER_NAME = "iHD"; }; # Optionally, set the env var
    virtualisation.docker.enable = true;

  }


#+END_SRC

** rodan
*** main
#+begin_src nix :tangle ~/.config/nixos/machines/rodan/rodan.nix

  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’).

  { config, pkgs, lib, ... }:

  {

    imports =
      [ ../../modules/shared.nix
        ./services.nix
      ];

    networking.hostName = "rodan"; # Define your hostname.    
  }  

#+end_src

*** services
#+begin_src nix :tangle ~/.config/nixos/machines/rodan/services.nix
  {
    services = {
      syncthing = {
        enable = true;
        user = "jacob";
        dataDir = "/home/jacob/Documents";
        configDir = "/home/jacob/.config/syncthing";
      };

      pipewire = {
        enable = true;
        pulse.enable = true;
      };
    };
  }
    
#+end_src
* Modules
** shared
#+BEGIN_src nix :tangle ~/.config/nixos/modules/shared.nix

  # Edit this configuration file to define what should be installed on
  # your system.  Help is available in the configuration.nix(5) man page
  # and in the NixOS manual (accessible by running ‘nixos-help’).

  { config, pkgs, ... }:

  {
    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
      git
      gh
      syncthing

      tree
      guile_3_0

      kitty
      emacs

      hyprland
      wofi
      tofi
      waybar
      hyprpaper
      wl-clipboard
      dmenu-rs
      cliphist

      brave
    #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    #  wget
    ];

    fonts.packages = with pkgs; [
      font-awesome
      ];

  }


#+end_src
* Containers
** homepage
#+begin_src nix :tangle ~/.config/nixos/containers/homepage.nix

    {lib, ...}: let
    contName = "homepage";
  in {

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/gethomepage/${toString contName}:latest";
    
      volumes = [
        "/home/jacob/.config/homepage:/app/config"
        "/run/user/1000/podman/podman.sock:/var/run/docker.sock"
      ];

      ports = [
        "3000:3000"
      ];
              
      environment = {
        PUID = "1000";
        PGID = "1000";
      };
    };
  }
    
#+end_src
** radarr
#+BEGIN_SRC nix :tangle ~/.config/nixos/containers/radarr.nix

  {lib, ...}: let
  contName = "radarr";
  dir1 = "/etc/oci.cont/${contName}";
in {
  system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
    mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
  '';

  virtualisation.oci-containers.containers."${contName}" = {
    hostname = "${contName}";
    autoStart = true;
    image = "ghcr.io/linuxserver/${toString contName}:latest";

    volumes = [
      "/etc/localtime:/etc/localtime:ro"
      "${toString dir1}:/config"
      "/external-media/data:/data"
    ];

    ports = [
      "7878:7878"
    ];
              
    environment = {
      PUID = "1000";
      PGID = "1000";
    };

#    extraOptions = [
#      "--network=macvlan_lan"
#      "--ip=192.168.87.32"
#    ];
  };
}


#+END_SRC
** sonarr
#+begin_src nix :tangle ~/.config/nixos/containers/sonarr.nix

    {lib, ...}: let
    contName = "sonarr";
    dir1 = "/etc/oci.cont/${contName}";
  in {
    system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
    '';

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/linuxserver/${toString contName}:latest";

      volumes = [
        "/etc/localtime:/etc/localtime:ro"
        "${toString dir1}:/config"
        "/external-media/data:/data"
      ];

      ports = [
        "8989:8989"
      ];
              
      environment = {
        PUID = "1000";
        PGID = "1000";
      };

  #    extraOptions = [
  #      "--network=macvlan_lan"
  #      "--ip=192.168.87.32"
  #    ];
    };
  }

#+end_src
** readarr
#+begin_src nix :tangle ~/.config/nixos/containers/readarr.nix
  {lib, ...}: let
    contName = "readarr";
    dir1 = "/etc/oci.cont/${contName}";
  in {
    system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
    '';

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/linuxserver/${toString contName}:develop";

      volumes = [
        "/etc/localtime:/etc/localtime:ro"
        "${toString dir1}:/config"
        "/external-media/data:/data"
      ];

      ports = [
        "8787:8787"
      ];
              
      environment = {
        PUID = "1000";
        PGID = "1000";
      };

  #    extraOptions = [
  #      "--network=macvlan_lan"
  #      "--ip=192.168.87.32"
  #    ];
    };
  }

#+end_src
** prowlarr
#+begin_src nix :tangle ~/.config/nixos/containers/prowlarr.nix

  {lib, ...}: let
  contName = "prowlarr";
  dir1 = "/etc/oci.cont/${contName}";
in {
  system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
    mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
  '';

  virtualisation.oci-containers.containers."${contName}" = {
    hostname = "${contName}";
    autoStart = true;
    image = "ghcr.io/linuxserver/${toString contName}:latest";

    volumes = [
      "/etc/localtime:/etc/localtime:ro"
      "${toString dir1}:/config"
    ];

    ports = [
      "9696:9696"
    ];
              
    environment = {
      PUID = "1000";
      PGID = "1000";
    };

#    extraOptions = [
#      "--network=macvlan_lan"
#      "--ip=192.168.87.32"
#    ];
  };
}


#+end_src
** calibre
#+begin_src nix :tangle ~/.config/nixos/containers/calibre.nix

    {lib, ...}: let
    contName = "calibre";
    dir1 = "/etc/oci.cont/${contName}/config";
  in {
    system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
    '';

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/linuxserver/${toString contName}:latest";

      volumes = [
        "/etc/localtime:/etc/localtime:ro"
        "${toString dir1}:/config"
        "/external-media/data/media/books:/data/media/books"
      ];

      ports = [
        "8980:8080"
        "8981:8081"
      ];
              
      environment = {
        PUID = "1000";
        PGID = "1000";
      };

    };
  }

#+end_src
** calibre-web
#+begin_src nix :tangle ~/.config/nixos/containers/calibre-web.nix

    {lib, ...}: let
    contName = "calibre-web";
    dir1 = "/etc/oci.cont/${contName}/config";
  in {
    system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
    '';

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/linuxserver/${toString contName}:latest";

      volumes = [
        "/etc/localtime:/etc/localtime:ro"
        "${toString dir1}:/config"
        "/external-media/data/media/books:/data/media/books"
      ];

      ports = [
        "8083:8083"
      ];
              
      environment = {
        PUID = "1000";
        PGID = "1000";
      };

    };
  }

#+end_src
** sabnzbd
#+begin_src nix :tangle ~/.config/nixos/containers/sabnzbd.nix

    {lib, ...}: let
    contName = "sabnzbd";
    dir1 = "/etc/oci.cont/${contName}";
  in {
    system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
    '';

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/linuxserver/${toString contName}:latest";

      volumes = [
        "/etc/localtime:/etc/localtime:ro"
        "${toString dir1}:/config"
        "/external-media/data/usenet:/data/usenet"
      ];

      ports = [
        "2000:8080"
      ];
              
      environment = {
        PUID = "1000";
        PGID = "1000";
      };

  #    extraOptions = [
  #      "--network=macvlan_lan"
  #      "--ip=192.168.87.32"
  #    ];
    };
  }

#+end_src
** jellyfin
#+begin_src nix :tangle ~/.config/nixos/containers/jellyfin.nix

    {lib, ...}: let
    contName = "jellyfin";
    dir1 = "/etc/oci.cont/${contName}/config";
  in {
    system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} & chown 1000:1000 ${toString dir1}
    '';

    virtualisation.oci-containers.containers."${contName}" = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/linuxserver/${toString contName}:latest";

      volumes = [
        "/etc/localtime:/etc/localtime:ro"
        "${toString dir1}:/config"
        "/external-media/data/media:/data/media"
      ];

      ports = [
        "8096:8096"
      ];

      environment = {
        PUID = "1000";
        PGID = "1000";
      };

      extraOptions = [
  #      "--network=macvlan_lan"
  #      "--ip=192.168.87.32"
         "--device=/dev/dri"
      ];
    };
  }

#+end_src
** caddy
#+begin_src nix :tangle ~/.config/nixos/containers/caddy.nix

  {lib, ...}: let
     contName = "caddy";
     dir1 = "/etc/oci.cont/${contName}/config";
     dir2 = "/etc/oci.cont/${contName}/data";
     dir3 = "/etc/oci.cont/${contName}/site";
   in {
     system.activationScripts."make${contName}Dir" = lib.stringAfter ["var"] ''
       mkdir -v -p ${toString dir1} && mkdir -v -p ${toString dir2} && mkdir -v -p ${toString dir3} 
     '';

     virtualisation.oci-containers.containers."${contName}" = {
         hostname = "${contName}";
         autoStart = true;
         image = "${toString contName}:latest";

         volumes = [
           "${toString dir1}:/config"
           "${toString dir2}:/data"
           "${toString dir3}:/srv"
           "/home/jacob/.config/caddy/Caddyfile:/etc/caddy/Caddyfile"
         ];

         ports = [
           "80:80"
           "443:443"
           "443:443/udp"
         ];

         environment = {
           PUID = "1000";
           PGID = "1000";
         };
       };
    }
     
#+end_src
** organice
#+begin_src nix

   {lib, ...}: let
    contName = "organice";
  in {

    virtualisation.oci-containers.containers."${contName}" = {
        hostname = "${contName}";
        autoStart = true;
        image = "twohundredok/${toString contName}:latest";

        ports = [
          "5000:5000"
        ];

        environment = {
          ORGANICE_WEBDAV_URL = "http://192.168.3.101:8080"
        };
      };
    }

#+end_src
** frigate
#+begin_src nix :tangle ~/.config/nixos/containers/frigate.nix

    {
    config,
    pkgs,
    lib,
    ...
  }: let
    contName = "frigate";
    rtmp = 1935;
    web = 5000;
    rtsp = 8554;
    webRTC = 8555;
    dir1 = "/etc/oci.cont/${contName}/db";
    dir2 = "/external-media/${contName}/media";
    dir3 = "/home/jacob/.config/${contName}";
  in {
    system.activationScripts.makeFrigateDir = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1} ${toString dir2}
    '';

    # make tmpdir for frigate to use, ssd wear bla bla, probs isnt even working :)
    fileSystems."/tmp/cache" = {
      device = "none";
      fsType = "tmpfs";
      options = ["defaults" "size=1G" "mode=755"];
    };

    virtualisation.oci-containers.containers.${contName} = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/blakeblackshear/frigate:0.14.0-beta3";
      ports = [
        "${toString rtmp}:${toString rtmp}"
        "${toString web}:${toString web}"
        "${toString rtsp}:${toString rtsp}"
        "${toString webRTC}:${toString webRTC}/tcp"
        "${toString webRTC}:${toString webRTC}/udp"
      ];

      volumes = [
        "${toString dir1}:/db"
        "${toString dir2}:/media/frigate"
        "${toString dir3}:/config"
        "/etc/localtime:/etc/localtime:ro"
      ];

      extraOptions = [
   #     "--network=macvlan_lan"
   #     "--ip=${secrets.ip.frigate}"
        "--privileged"
        "--shm-size=512m"
  #      "--device=/dev/bus/usb:/dev/bus/usb" # coral
        "--device=/dev/dri/renderD128" # gpu
        "--mount=type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000" # tempfs
      ];
    };
  }
    
#+end_src
** hass
#+begin_src nix :tangle ~/.config/nixos/containers/hass.nix

    {
    pkgs,
    lib,
    ...
  }: let
    contName = "hass";
    dir1 = "/etc/oci.cont/${contName}/config";
  in {
    system.activationScripts.makeFrigateDir = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1}
    '';

    virtualisation.oci-containers.containers.${contName} = {
      hostname = "${contName}";
      autoStart = true;
      image = "ghcr.io/home-assistant/home-assistant:2024.4";
      ports = [
        "8123:8123"
      ];

      volumes = [
        "${dir1}:/config"
        "/var/run/dbus:/run/dbus:ro"
        "/etc/localtime:/etc/localtime:ro"
      ];
    };
  }

#+end_src
** zwavejs
#+begin_src nix :tangle ~/.config/nixos/containers/zwavejs.nix

    {
    pkgs,
    lib,
    ...
  }: let
    contName = "zwavejs";
    dir1 = "/etc/oci.cont/${contName}/store";
  in {
    system.activationScripts.makeFrigateDir = lib.stringAfter ["var"] ''
      mkdir -v -p ${toString dir1}
    '';

    virtualisation.oci-containers.containers.${contName} = {
      hostname = "${contName}";
      autoStart = true;
      image = "zwavejs/zwave-js-ui:latest";
      ports = [
        "8091:8091"
        "3000:3000"
      ];
    
      volumes = [
        "${dir1}:/usr/src/app/store"
      ];

      extraOptions = [
        "--device=/dev/serial/by-id/usb-Silicon_Labs_Zooz_ZST10_700_Z-Wave_Stick_d8b3184ecd60ec119a403f7625bfaa52-if00-port0:/dev/zwave" 
      ];

    };

    

  }

#+end_src
